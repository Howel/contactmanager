// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ContactManager.module('ContactsApp.List', function(List, ContactManager, Backbone, Marionette, $, _) {
  List.Layout = (function(_super) {
    __extends(Layout, _super);

    function Layout() {
      return Layout.__super__.constructor.apply(this, arguments);
    }

    Layout.prototype.template = '#contact-list-layout';

    Layout.prototype.regions = {
      panelRegion: '#panel-region',
      contactsRegion: '#contacts-region'
    };

    return Layout;

  })(Marionette.Layout);
  List.Panel = (function(_super) {
    __extends(Panel, _super);

    function Panel() {
      return Panel.__super__.constructor.apply(this, arguments);
    }

    Panel.prototype.template = '#contact-list-panel';

    Panel.prototype.triggers = {
      'click button.js-new': 'contact:new'
    };

    Panel.prototype.events = {
      'submit #filter-form': 'filterContacts'
    };

    Panel.prototype.filterContacts = function(e) {
      var criterion;
      e.preventDefault();
      criterion = this.$('.js-filter-criterion').val();
      return this.trigger('contacts:filter', criterion);
    };

    return Panel;

  })(Marionette.ItemView);
  List.Contact = (function(_super) {
    __extends(Contact, _super);

    function Contact() {
      return Contact.__super__.constructor.apply(this, arguments);
    }

    Contact.prototype.tagName = 'tr';

    Contact.prototype.template = '#contact-list-item';

    Contact.prototype.events = {
      'click': 'highlightName',
      'click button.js-remove': 'deleteClicked',
      'click td a.js-show': 'showClicked',
      'click td a.js-edit': 'editClicked'
    };

    Contact.prototype.remove = function() {
      return this.$el.fadeOut((function(_this) {
        return function() {
          return Marionette.ItemView.prototype.remove.call(_this);
        };
      })(this));
    };

    Contact.prototype.highlightName = function() {
      return this.$el.toggleClass('danger');
    };

    Contact.prototype.flash = function(cssClass) {
      var $view;
      $view = this.$el;
      return $view.hide().toggleClass(cssClass).fadeIn(800, function() {
        return setTimeout(function() {
          return $view.toggleClass(cssClass);
        }, 500);
      });
    };

    Contact.prototype.deleteClicked = function(e) {
      e.stopPropagation();
      return this.trigger('contact:delete', this.model);
    };

    Contact.prototype.showClicked = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return this.trigger('contact:show', this.model);
    };

    Contact.prototype.editClicked = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return this.trigger('contact:edit', this.model);
    };

    return Contact;

  })(Marionette.ItemView);
  return List.Contacts = (function(_super) {
    __extends(Contacts, _super);

    function Contacts() {
      return Contacts.__super__.constructor.apply(this, arguments);
    }

    Contacts.prototype.tagName = 'table';

    Contacts.prototype.className = 'table table-hover';

    Contacts.prototype.template = '#contact-list';

    Contacts.prototype.itemView = List.Contact;

    Contacts.prototype.itemViewContainer = 'tbody';

    return Contacts;

  })(Marionette.CompositeView);
});
