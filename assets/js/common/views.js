// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ContactManager.module('ContactsApp.Common.Views', function(Views, ContactManager, Backbone, Marionette, $, _) {
  Views.Form = (function(_super) {
    __extends(Form, _super);

    function Form() {
      return Form.__super__.constructor.apply(this, arguments);
    }

    Form.prototype.template = '#contact-form';

    Form.prototype.events = {
      'click button.js-submit': 'submitClicked'
    };

    Form.prototype.submitClicked = function(e) {
      var data;
      e.preventDefault();
      data = Backbone.Syphon.serialize(this);
      return this.trigger('form:submit', data);
    };

    Form.prototype.onRender = function() {
      var $title;
      if (!this.options.asModal) {
        $title = $('<h1>', {
          text: this.title
        });
        return this.$el.prepend($title);
      }
    };

    Form.prototype.onShow = function() {
      if (this.options.asModal) {
        return this.$el.dialog({
          modal: true,
          title: this.title,
          width: 'auto'
        });
      }
    };

    Form.prototype.onFormDataInvalid = function(errors) {
      var $view, clearFormErrors, markErrors;
      $view = this.$el;
      clearFormErrors = function() {
        var $form;
        $form = $view.find('form');
        $form.find('.help-inline.error').each(function() {
          return $(this).remove();
        });
        return $form.find('.control-group.error').each(function() {
          return $(this).removeClass('error');
        });
      };
      markErrors = function(value, key) {
        var $controlGroup, $errorEl;
        $controlGroup = $view.find("#contact-" + key).parent();
        $errorEl = $("<span>", {
          "class": "help-inline error",
          text: value
        });
        return $controlGroup.append($errorEl).addClass('error');
      };
      clearFormErrors();
      return _.each(errors, markErrors);
    };

    return Form;

  })(Marionette.ItemView);
  return Views.Loading = (function(_super) {
    __extends(Loading, _super);

    function Loading() {
      return Loading.__super__.constructor.apply(this, arguments);
    }

    Loading.prototype.template = '#loading-view';

    Loading.prototype.initialize = function(options) {
      options || (options = {});
      this.title = options.title || 'Loading Data';
      return this.message = options.message || 'Please wait, data is loading.';
    };

    Loading.prototype.serializeData = function() {
      return {
        title: this.title,
        message: this.message
      };
    };

    Loading.prototype.onShow = function() {
      var opts;
      opts = {
        lines: 13,
        length: 20,
        width: 10,
        radius: 30,
        corners: 1,
        rotate: 0,
        direction: 1,
        color: '#000',
        speed: 1,
        trail: 60,
        shadow: false,
        hwaccel: false,
        className: 'spinner',
        zIndex: 2e9,
        top: '30px',
        left: 'auto'
      };
      return $('#spinner').spin(opts);
    };

    return Loading;

  })(Marionette.ItemView);
});
