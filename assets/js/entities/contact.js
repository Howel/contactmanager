// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ContactManager.module('Entities', function(Entities, ContactManager, Backbone, Marionette, $, _) {
  var API, contacts, initializeContacts;
  Entities.Contact = (function(_super) {
    __extends(Contact, _super);

    function Contact() {
      return Contact.__super__.constructor.apply(this, arguments);
    }

    Contact.prototype.urlRoot = 'contacts';

    Contact.prototype.defaults = {
      firstName: '',
      lastName: '',
      phoneNumber: ''
    };

    Contact.prototype.validate = function(attrs, options) {
      var errors;
      errors = {};
      if (!attrs.firstName) {
        errors.firstName = "can't be blank";
      }
      if (!attrs.lastName) {
        errors.lastName = "can't be blank";
      }
      if (!(attrs.lastName && attrs.lastName.length > 1)) {
        errors.lastName = "is too short";
      }
      if (!_.isEmpty(errors)) {
        return errors;
      }
    };

    return Contact;

  })(Backbone.Model);
  Entities.configureStorage(Entities.Contact);
  Entities.ContactCollection = (function(_super) {
    __extends(ContactCollection, _super);

    function ContactCollection() {
      return ContactCollection.__super__.constructor.apply(this, arguments);
    }

    ContactCollection.prototype.url = 'contacts';

    ContactCollection.prototype.model = Entities.Contact;

    ContactCollection.prototype.comparator = 'firstName';

    return ContactCollection;

  })(Backbone.Collection);
  Entities.configureStorage(Entities.ContactCollection);
  contacts = null;
  initializeContacts = function() {
    contacts = new Entities.ContactCollection([
      {
        id: 1,
        firstName: 'Alice',
        lastName: 'Arten',
        phoneNumber: '555-0184'
      }, {
        id: 2,
        firstName: 'Bob',
        lastName: 'Brigham',
        phoneNumber: '555-0163'
      }, {
        id: 3,
        firstName: 'Charlie',
        lastName: 'Campbell',
        phoneNumber: '555-0129'
      }
    ]);
    contacts.forEach(function(contact) {
      return contact.save();
    });
    return contacts.models;
  };
  API = {
    getContactEntities: function() {
      var defer, promise;
      contacts = new Entities.ContactCollection();
      defer = $.Deferred();
      contacts.fetch({
        success: function(data) {
          return defer.resolve(data);
        }
      });
      promise = defer.promise();
      $.when(promise).done(function(contacts) {
        var models;
        if (contacts.length === 0) {
          models = initializeContacts();
          return contacts.reset(models);
        }
      });
      return contacts;
    },
    getContactEntity: function(contactId) {
      var contact, defer;
      contact = new Entities.Contact({
        id: contactId
      });
      defer = $.Deferred();
      setTimeout(function() {
        return contact.fetch({
          success: function(data) {
            return defer.resolve(data);
          },
          error: function(data) {
            return defer.resolve(void 0);
          }
        });
      }, 500);
      return defer.promise();
    }
  };
  ContactManager.reqres.setHandler('contact:entities', function() {
    return API.getContactEntities();
  });
  return ContactManager.reqres.setHandler('contact:entity', function(id) {
    return API.getContactEntity(id);
  });
});
